/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Vouch } from "./Vouch";
import { VouchCountArgs } from "./VouchCountArgs";
import { VouchFindManyArgs } from "./VouchFindManyArgs";
import { VouchFindUniqueArgs } from "./VouchFindUniqueArgs";
import { CreateVouchArgs } from "./CreateVouchArgs";
import { UpdateVouchArgs } from "./UpdateVouchArgs";
import { DeleteVouchArgs } from "./DeleteVouchArgs";
import { User } from "../../user/base/User";
import { VouchService } from "../vouch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vouch)
export class VouchResolverBase {
  constructor(
    protected readonly service: VouchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "read",
    possession: "any",
  })
  async _vouchesMeta(
    @graphql.Args() args: VouchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vouch])
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "read",
    possession: "any",
  })
  async vouches(@graphql.Args() args: VouchFindManyArgs): Promise<Vouch[]> {
    return this.service.vouches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vouch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "read",
    possession: "own",
  })
  async vouch(
    @graphql.Args() args: VouchFindUniqueArgs
  ): Promise<Vouch | null> {
    const result = await this.service.vouch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vouch)
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "create",
    possession: "any",
  })
  async createVouch(@graphql.Args() args: CreateVouchArgs): Promise<Vouch> {
    return await this.service.createVouch({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vouch)
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "update",
    possession: "any",
  })
  async updateVouch(
    @graphql.Args() args: UpdateVouchArgs
  ): Promise<Vouch | null> {
    try {
      return await this.service.updateVouch({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vouch)
  @nestAccessControl.UseRoles({
    resource: "Vouch",
    action: "delete",
    possession: "any",
  })
  async deleteVouch(
    @graphql.Args() args: DeleteVouchArgs
  ): Promise<Vouch | null> {
    try {
      return await this.service.deleteVouch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Vouch): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
