/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { VouchService } from "../vouch.service";
import { VouchCreateInput } from "./VouchCreateInput";
import { VouchWhereInput } from "./VouchWhereInput";
import { VouchWhereUniqueInput } from "./VouchWhereUniqueInput";
import { VouchFindManyArgs } from "./VouchFindManyArgs";
import { VouchUpdateInput } from "./VouchUpdateInput";
import { Vouch } from "./Vouch";

export class VouchGrpcControllerBase {
  constructor(protected readonly service: VouchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vouch })
  @GrpcMethod("VouchService", "createVouch")
  async createVouch(@common.Body() data: VouchCreateInput): Promise<Vouch> {
    return await this.service.createVouch({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        badge: true,
        category: true,
        challenge: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        vouchText: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vouch] })
  @ApiNestedQuery(VouchFindManyArgs)
  @GrpcMethod("VouchService", "vouches")
  async vouches(@common.Req() request: Request): Promise<Vouch[]> {
    const args = plainToClass(VouchFindManyArgs, request.query);
    return this.service.vouches({
      ...args,
      select: {
        badge: true,
        category: true,
        challenge: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        vouchText: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vouch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VouchService", "vouch")
  async vouch(
    @common.Param() params: VouchWhereUniqueInput
  ): Promise<Vouch | null> {
    const result = await this.service.vouch({
      where: params,
      select: {
        badge: true,
        category: true,
        challenge: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        vouchText: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vouch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VouchService", "updateVouch")
  async updateVouch(
    @common.Param() params: VouchWhereUniqueInput,
    @common.Body() data: VouchUpdateInput
  ): Promise<Vouch | null> {
    try {
      return await this.service.updateVouch({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          badge: true,
          category: true,
          challenge: true,
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          vouchText: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vouch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VouchService", "deleteVouch")
  async deleteVouch(
    @common.Param() params: VouchWhereUniqueInput
  ): Promise<Vouch | null> {
    try {
      return await this.service.deleteVouch({
        where: params,
        select: {
          badge: true,
          category: true,
          challenge: true,
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          vouchText: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
