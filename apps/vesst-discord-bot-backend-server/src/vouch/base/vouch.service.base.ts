/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Vouch as PrismaVouch,
  User as PrismaUser,
} from "@prisma/client";

export class VouchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VouchCountArgs, "select">): Promise<number> {
    return this.prisma.vouch.count(args);
  }

  async vouches(args: Prisma.VouchFindManyArgs): Promise<PrismaVouch[]> {
    return this.prisma.vouch.findMany(args);
  }
  async vouch(args: Prisma.VouchFindUniqueArgs): Promise<PrismaVouch | null> {
    return this.prisma.vouch.findUnique(args);
  }
  async createVouch(args: Prisma.VouchCreateArgs): Promise<PrismaVouch> {
    return this.prisma.vouch.create(args);
  }
  async updateVouch(args: Prisma.VouchUpdateArgs): Promise<PrismaVouch> {
    return this.prisma.vouch.update(args);
  }
  async deleteVouch(args: Prisma.VouchDeleteArgs): Promise<PrismaVouch> {
    return this.prisma.vouch.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vouch
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
