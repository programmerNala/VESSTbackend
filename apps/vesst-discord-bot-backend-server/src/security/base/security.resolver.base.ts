/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Security } from "./Security";
import { SecurityCountArgs } from "./SecurityCountArgs";
import { SecurityFindManyArgs } from "./SecurityFindManyArgs";
import { SecurityFindUniqueArgs } from "./SecurityFindUniqueArgs";
import { CreateSecurityArgs } from "./CreateSecurityArgs";
import { UpdateSecurityArgs } from "./UpdateSecurityArgs";
import { DeleteSecurityArgs } from "./DeleteSecurityArgs";
import { User } from "../../user/base/User";
import { SecurityService } from "../security.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Security)
export class SecurityResolverBase {
  constructor(
    protected readonly service: SecurityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "read",
    possession: "any",
  })
  async _securitiesMeta(
    @graphql.Args() args: SecurityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Security])
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "read",
    possession: "any",
  })
  async securities(
    @graphql.Args() args: SecurityFindManyArgs
  ): Promise<Security[]> {
    return this.service.securities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Security, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "read",
    possession: "own",
  })
  async security(
    @graphql.Args() args: SecurityFindUniqueArgs
  ): Promise<Security | null> {
    const result = await this.service.security(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Security)
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "create",
    possession: "any",
  })
  async createSecurity(
    @graphql.Args() args: CreateSecurityArgs
  ): Promise<Security> {
    return await this.service.createSecurity({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Security)
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "update",
    possession: "any",
  })
  async updateSecurity(
    @graphql.Args() args: UpdateSecurityArgs
  ): Promise<Security | null> {
    try {
      return await this.service.updateSecurity({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Security)
  @nestAccessControl.UseRoles({
    resource: "Security",
    action: "delete",
    possession: "any",
  })
  async deleteSecurity(
    @graphql.Args() args: DeleteSecurityArgs
  ): Promise<Security | null> {
    try {
      return await this.service.deleteSecurity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Security): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
