/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Security as PrismaSecurity,
  User as PrismaUser,
} from "@prisma/client";

export class SecurityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SecurityCountArgs, "select">): Promise<number> {
    return this.prisma.security.count(args);
  }

  async securities(
    args: Prisma.SecurityFindManyArgs
  ): Promise<PrismaSecurity[]> {
    return this.prisma.security.findMany(args);
  }
  async security(
    args: Prisma.SecurityFindUniqueArgs
  ): Promise<PrismaSecurity | null> {
    return this.prisma.security.findUnique(args);
  }
  async createSecurity(
    args: Prisma.SecurityCreateArgs
  ): Promise<PrismaSecurity> {
    return this.prisma.security.create(args);
  }
  async updateSecurity(
    args: Prisma.SecurityUpdateArgs
  ): Promise<PrismaSecurity> {
    return this.prisma.security.update(args);
  }
  async deleteSecurity(
    args: Prisma.SecurityDeleteArgs
  ): Promise<PrismaSecurity> {
    return this.prisma.security.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.security
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
