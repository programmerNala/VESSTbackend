/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Embed } from "./Embed";
import { EmbedCountArgs } from "./EmbedCountArgs";
import { EmbedFindManyArgs } from "./EmbedFindManyArgs";
import { EmbedFindUniqueArgs } from "./EmbedFindUniqueArgs";
import { CreateEmbedArgs } from "./CreateEmbedArgs";
import { UpdateEmbedArgs } from "./UpdateEmbedArgs";
import { DeleteEmbedArgs } from "./DeleteEmbedArgs";
import { EmbedService } from "../embed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Embed)
export class EmbedResolverBase {
  constructor(
    protected readonly service: EmbedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "read",
    possession: "any",
  })
  async _embedsMeta(
    @graphql.Args() args: EmbedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Embed])
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "read",
    possession: "any",
  })
  async embeds(@graphql.Args() args: EmbedFindManyArgs): Promise<Embed[]> {
    return this.service.embeds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Embed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "read",
    possession: "own",
  })
  async embed(
    @graphql.Args() args: EmbedFindUniqueArgs
  ): Promise<Embed | null> {
    const result = await this.service.embed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Embed)
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "create",
    possession: "any",
  })
  async createEmbed(@graphql.Args() args: CreateEmbedArgs): Promise<Embed> {
    return await this.service.createEmbed({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Embed)
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "update",
    possession: "any",
  })
  async updateEmbed(
    @graphql.Args() args: UpdateEmbedArgs
  ): Promise<Embed | null> {
    try {
      return await this.service.updateEmbed({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Embed)
  @nestAccessControl.UseRoles({
    resource: "Embed",
    action: "delete",
    possession: "any",
  })
  async deleteEmbed(
    @graphql.Args() args: DeleteEmbedArgs
  ): Promise<Embed | null> {
    try {
      return await this.service.deleteEmbed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
