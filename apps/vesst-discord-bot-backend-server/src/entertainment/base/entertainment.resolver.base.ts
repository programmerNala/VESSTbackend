/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Entertainment } from "./Entertainment";
import { EntertainmentCountArgs } from "./EntertainmentCountArgs";
import { EntertainmentFindManyArgs } from "./EntertainmentFindManyArgs";
import { EntertainmentFindUniqueArgs } from "./EntertainmentFindUniqueArgs";
import { CreateEntertainmentArgs } from "./CreateEntertainmentArgs";
import { UpdateEntertainmentArgs } from "./UpdateEntertainmentArgs";
import { DeleteEntertainmentArgs } from "./DeleteEntertainmentArgs";
import { EntertainmentService } from "../entertainment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Entertainment)
export class EntertainmentResolverBase {
  constructor(
    protected readonly service: EntertainmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "read",
    possession: "any",
  })
  async _entertainmentsMeta(
    @graphql.Args() args: EntertainmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Entertainment])
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "read",
    possession: "any",
  })
  async entertainments(
    @graphql.Args() args: EntertainmentFindManyArgs
  ): Promise<Entertainment[]> {
    return this.service.entertainments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Entertainment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "read",
    possession: "own",
  })
  async entertainment(
    @graphql.Args() args: EntertainmentFindUniqueArgs
  ): Promise<Entertainment | null> {
    const result = await this.service.entertainment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Entertainment)
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "create",
    possession: "any",
  })
  async createEntertainment(
    @graphql.Args() args: CreateEntertainmentArgs
  ): Promise<Entertainment> {
    return await this.service.createEntertainment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Entertainment)
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "update",
    possession: "any",
  })
  async updateEntertainment(
    @graphql.Args() args: UpdateEntertainmentArgs
  ): Promise<Entertainment | null> {
    try {
      return await this.service.updateEntertainment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Entertainment)
  @nestAccessControl.UseRoles({
    resource: "Entertainment",
    action: "delete",
    possession: "any",
  })
  async deleteEntertainment(
    @graphql.Args() args: DeleteEntertainmentArgs
  ): Promise<Entertainment | null> {
    try {
      return await this.service.deleteEntertainment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
