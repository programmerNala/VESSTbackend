/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EntertainmentService } from "../entertainment.service";
import { EntertainmentCreateInput } from "./EntertainmentCreateInput";
import { EntertainmentWhereInput } from "./EntertainmentWhereInput";
import { EntertainmentWhereUniqueInput } from "./EntertainmentWhereUniqueInput";
import { EntertainmentFindManyArgs } from "./EntertainmentFindManyArgs";
import { EntertainmentUpdateInput } from "./EntertainmentUpdateInput";
import { Entertainment } from "./Entertainment";

export class EntertainmentGrpcControllerBase {
  constructor(protected readonly service: EntertainmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Entertainment })
  @GrpcMethod("EntertainmentService", "createEntertainment")
  async createEntertainment(
    @common.Body() data: EntertainmentCreateInput
  ): Promise<Entertainment> {
    return await this.service.createEntertainment({
      data: data,
      select: {
        createdAt: true,
        details: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Entertainment] })
  @ApiNestedQuery(EntertainmentFindManyArgs)
  @GrpcMethod("EntertainmentService", "entertainments")
  async entertainments(
    @common.Req() request: Request
  ): Promise<Entertainment[]> {
    const args = plainToClass(EntertainmentFindManyArgs, request.query);
    return this.service.entertainments({
      ...args,
      select: {
        createdAt: true,
        details: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Entertainment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntertainmentService", "entertainment")
  async entertainment(
    @common.Param() params: EntertainmentWhereUniqueInput
  ): Promise<Entertainment | null> {
    const result = await this.service.entertainment({
      where: params,
      select: {
        createdAt: true,
        details: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Entertainment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntertainmentService", "updateEntertainment")
  async updateEntertainment(
    @common.Param() params: EntertainmentWhereUniqueInput,
    @common.Body() data: EntertainmentUpdateInput
  ): Promise<Entertainment | null> {
    try {
      return await this.service.updateEntertainment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          details: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Entertainment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntertainmentService", "deleteEntertainment")
  async deleteEntertainment(
    @common.Param() params: EntertainmentWhereUniqueInput
  ): Promise<Entertainment | null> {
    try {
      return await this.service.deleteEntertainment({
        where: params,
        select: {
          createdAt: true,
          details: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
