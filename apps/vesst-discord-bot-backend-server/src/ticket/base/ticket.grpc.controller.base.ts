/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { TicketService } from "../ticket.service";
import { TicketCreateInput } from "./TicketCreateInput";
import { TicketWhereInput } from "./TicketWhereInput";
import { TicketWhereUniqueInput } from "./TicketWhereUniqueInput";
import { TicketFindManyArgs } from "./TicketFindManyArgs";
import { TicketUpdateInput } from "./TicketUpdateInput";
import { Ticket } from "./Ticket";

export class TicketGrpcControllerBase {
  constructor(protected readonly service: TicketService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ticket })
  @GrpcMethod("TicketService", "createTicket")
  async createTicket(@common.Body() data: TicketCreateInput): Promise<Ticket> {
    return await this.service.createTicket({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dateClosed: true,
        dateCreated: true,
        id: true,
        issue: true,
        priority: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ticket] })
  @ApiNestedQuery(TicketFindManyArgs)
  @GrpcMethod("TicketService", "tickets")
  async tickets(@common.Req() request: Request): Promise<Ticket[]> {
    const args = plainToClass(TicketFindManyArgs, request.query);
    return this.service.tickets({
      ...args,
      select: {
        createdAt: true,
        dateClosed: true,
        dateCreated: true,
        id: true,
        issue: true,
        priority: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TicketService", "ticket")
  async ticket(
    @common.Param() params: TicketWhereUniqueInput
  ): Promise<Ticket | null> {
    const result = await this.service.ticket({
      where: params,
      select: {
        createdAt: true,
        dateClosed: true,
        dateCreated: true,
        id: true,
        issue: true,
        priority: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TicketService", "updateTicket")
  async updateTicket(
    @common.Param() params: TicketWhereUniqueInput,
    @common.Body() data: TicketUpdateInput
  ): Promise<Ticket | null> {
    try {
      return await this.service.updateTicket({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dateClosed: true,
          dateCreated: true,
          id: true,
          issue: true,
          priority: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TicketService", "deleteTicket")
  async deleteTicket(
    @common.Param() params: TicketWhereUniqueInput
  ): Promise<Ticket | null> {
    try {
      return await this.service.deleteTicket({
        where: params,
        select: {
          createdAt: true,
          dateClosed: true,
          dateCreated: true,
          id: true,
          issue: true,
          priority: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
